<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stan on Kevin L. McKee</title>
    <link>https://kmckee90.github.io/tags/stan/</link>
    <description>Recent content in Stan on Kevin L. McKee</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>kmckee90@gmail.com</managingEditor>
    <webMaster>kmckee90@gmail.com</webMaster>
    <lastBuildDate>Sat, 20 Mar 2021 21:47:13 +0000</lastBuildDate>
    <atom:link href="https://kmckee90.github.io/tags/stan/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Discretization in 3 languages</title>
      <link>https://kmckee90.github.io/posts/discretization/</link>
      <pubDate>Sat, 20 Mar 2021 21:47:13 +0000</pubDate><author>kmckee90@gmail.com</author>
      <guid>https://kmckee90.github.io/posts/discretization/</guid>
      <description>&lt;p&gt;There is an obscure and useful function that makes it easy to fit stochastic differential equations to data insofar as the model can be linearized without causing too much trouble. The function discretizes the continuous-time (i.e., differential equation) state matrices &lt;code&gt;A&lt;/code&gt;, the drift or state transition matrix, &lt;code&gt;B&lt;/code&gt;, the input or covariate coefficient matrix, and &lt;code&gt;Q&lt;/code&gt;, diffusion or noise covariance matrix. That means that the function essentially takes the differential equation in matrix form and solves it for a given time step. The discretized matrices function like those of an autoregressive process. Some details of this approach and what this does can be found &lt;a href=&#34;https://en.wikipedia.org/wiki/Discretization&#34;&gt;here&lt;/a&gt; but not exactly a complete implementation, namely with matrix &lt;code&gt;B&lt;/code&gt;. So this is one of those code blocks I just have backed up in several project folders in various languages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding MCMC and autodifferentiation</title>
      <link>https://kmckee90.github.io/posts/edu1/</link>
      <pubDate>Fri, 19 Mar 2021 10:11:35 +0000</pubDate><author>kmckee90@gmail.com</author>
      <guid>https://kmckee90.github.io/posts/edu1/</guid>
      <description>&lt;p&gt;In putting together educational materials related to Stan and posterior sampling, I remembered two good ones.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://chi-feng.github.io/mcmc-demo/app.html&#34;&gt;MCMC interactive gallery&lt;/a&gt; is the best set of MCMC visualizations I&amp;rsquo;ve found.&lt;/p&gt;&#xA;&lt;p&gt;Stan uses NUTS, so it has to calculate numerous gradients for each new sample and does so by autodifferentiation.&#xA;I recommend &lt;a href=&#34;https://www.youtube.com/embed/wG_nF1awSSY&#34;&gt;this video&lt;/a&gt; for understanding autodiff.&#xA;It helps a lot to know what Stan is doing with the model code to avoid giving it more work than necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stan: Structural Ordinal Item Response Theory with a Latent Interaction</title>
      <link>https://kmckee90.github.io/posts/ordinalirt/</link>
      <pubDate>Fri, 19 Mar 2021 08:55:22 +0000</pubDate><author>kmckee90@gmail.com</author>
      <guid>https://kmckee90.github.io/posts/ordinalirt/</guid>
      <description>&lt;p&gt;The Non-Gaussian factor model introduces the idea of using other distributions for a factor analysis. But that code is not very generalized, and in reality we&amp;rsquo;ll tend to need something more like structural equation modeling with non-Gaussian variables.&lt;/p&gt;&#xA;&lt;p&gt;The name for a factor model with logit-linked indicators, whether dichotomous or ordinal, is Item Response Theory. It has been used for decades to develop instruments and in particular, tests. Because of its history, factor loadings are called the &amp;ldquo;discrimination&amp;rdquo; parameters, intercepts are the item &amp;ldquo;difficulty&amp;rdquo;, and the factor scores represent each person&amp;rsquo;s &amp;ldquo;ability&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stan: Non-Normal Factor Model</title>
      <link>https://kmckee90.github.io/posts/nongaussianfa/</link>
      <pubDate>Fri, 19 Mar 2021 08:43:04 +0000</pubDate><author>kmckee90@gmail.com</author>
      <guid>https://kmckee90.github.io/posts/nongaussianfa/</guid>
      <description>&lt;p&gt;There are so many factor analyses in the world and so few truly normally distributed variables. I have not seen much careful tailoring of residual distributions in medical or psychological research. It is probably because most software don&amp;rsquo;t support it or make it convenient. It was a revelation to me that you can use Markov Chain Monte Carlo (MCMC) to sample latent variables and then do all kinds of things, like non-Gaussian distributions and latent variable interactions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
